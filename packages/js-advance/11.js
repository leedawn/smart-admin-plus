// 通过 JS 引擎的堆栈了解闭包原理
// 1. 作用域分成静态作用域和动态作用域。变量和函数声明的位置就是静态作用域，也叫词法作用域。调用函数的位置就是动态作用域。

// 2. 代码编译确定作用域
//    a. 数据结构的存储空间。栈是线性连续的数据结构存储空间，可以存放原始数据类型，对象等复杂类型的地址，函数的执行形态和
//       和 this 值。堆是树形非连续的数据结构存储空间，可以存放对象，数组等复杂类型，还有内置的 window 对象和 document 对象。
//    b. 编译过程。将字符串分成段进行词法分析，再转成抽象语法树做语法分析，同时确定全局作用域和局部作用域，最后转成中间代码进行实时编译。
//    c. 代码执行。将可执行代码放到调用栈中执行，查找变量会从内向外查找。

// 3. 立即执行函数利用作用域进行封装，而不会污染全局作用域
/* var a = 2;
(function foo() {
  var a = 3;
  console.log(a); // 3
})();
console.log(a); // 2 */

// 4. 分析闭包。JavaScript 解析闭包的时候只会解析外层函数，闭包里面的函数会延迟解析，但是会进行预解析。当预解析的时候发现会使用外部变量，
// 会将该变量由栈移动到堆，延长生命周期。注意实际开发中闭包需要使用本地变量而不是全局变量。

// 5. 变量和函数声明提升。函数声明提升优先。
/* console.log(a); // [Function: a]
var a = 3;
function a() {} */

// 6. 使用 let 和 const 创建块级作用域
/* console.log(a); // Cannot access 'a' before initialization
let a = 3; */
